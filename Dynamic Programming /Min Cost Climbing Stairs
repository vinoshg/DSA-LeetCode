class Solution { //Time: O(n) Space:O(1)
    public int minCostClimbingStairs(int[] cost) {
        int n = cost.length;
        // int[] dp = new int[n + 1];
        // Arrays.fill(dp, -1);

        // dp[0] = cost[0];
        // dp[1] = cost[1];
        int prev2 = cost[0];
        int prev1 = cost[1];

        for(int i = 2; i < n; i++) {
            // dp[i] = cost[i] + Math.min(dp[i - 1], dp[i - 2]);
            int curr = cost[i] + Math.min(prev1, prev2);
            prev2 = prev1;
            prev1 = curr;
        }
        return Math.min(prev1, prev2);
        // return Math.min(dp[n - 1], dp[n - 2]);
        // return Math.min(helper(cost, n - 1, dp), helper(cost, n - 2, dp));
    }
    // public int helper(int[] cost, int n, int[] dp) {
    //     if(n == 0) {
    //         return cost[0];
    //     }

    //     if(n == 1) {
    //         return cost[1];
    //     }

    //     if(dp[n] != -1) {
    //         return dp[n];
    //     }

    //     return dp[n] = cost[n] + Math.min(helper(cost, n - 1, dp), helper(cost, n - 2, dp));
    // }
}
