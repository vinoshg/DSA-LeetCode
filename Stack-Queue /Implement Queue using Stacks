// https://leetcode.com/problems/implement-queue-using-stacks/
lass MyQueue {
    Stack<Integer> first;
    Stack<Integer> second;

    public MyQueue()  {
        first = new Stack<>();
        second = new Stack<>();
    }

    // Push Efficient
    // public void push(int x) {
    //     first.push(x);
    // }
    
    // public int pop() { // Here No need to use throws Exception for stack.isEmpty()
    //     while(!first.isEmpty()) {
    //        second.push(first.pop());
    //     }

    //     int removed = second.pop();

    //     while(!second.isEmpty()) {
    //         first.push(second.pop());
    //     }

    //     return removed;
    // }
    
    // public int peek() {
    //     while(!first.isEmpty()) {
    //         second.push(first.pop());
    //     }

    //     int peeked = second.peek();

    //     while(!second.isEmpty()) {
    //         first.push(second.pop());
    //     }

    //     return peeked;
    // }
    
    // public boolean empty() {
    //     return first.isEmpty();
    // }

    //Remove efficient
    public void push(int x)  {
        while(!first.isEmpty()) {
            second.push(first.pop());
        }

        first.push(x);

        while(!second.isEmpty()) {
            first.push(second.pop());
        }
    }
    
    public int pop() {
        return first.pop();
    }
    
    public int peek() {
        return first.peek();
    }
    
    public boolean empty() {
        return first.isEmpty();
    }
}
