// https://leetcode.com/problems/implement-trie-prefix-tree/description/
class Trie { // Trie : 1. Access all nodes from its parent
    class Node { // 2. I will not goto leaf node, will access using parent
        Node[] children;
        boolean eow;

        public Node() {
            children = new Node[26];
            // for(int i = 0; i < 26; i++) {
            //     children[i] = null;
            // }
            eow = false;
        }
    }

    Node root;

    public Trie() {
        root = new Node();
    }
    
    public void insert(String word) { // Time : O(L) and Space : O(N * L) is Trie Data Structure storage
        int index = 0;
        Node current = root;

        for(int i = 0; i < word.length(); i++) {
            index = word.charAt(i) - 'a';

            if(current.children[index] == null) {
                current.children[index] = new Node();
            }

            current = current.children[index];
        }
        current.eow = true;
    }
    
    public boolean search(String word) { // Time : O(L) and Space : O(N * L)
        int index = 0;
        Node current = root;

        for(int i = 0; i < word.length(); i++) {
            index = word.charAt(i) - 'a';

            if(current.children[index] == null) {
                return false;
            }
            if(i == word.length() - 1 && current.children[index].eow == false) {
                return false;
            }

            current = current.children[index];
        }
        return true;
    }
    
    public boolean startsWith(String prefix) { // Time : O(L) and Space : O(N * L)
        int index = 0;
        Node current = root;

        for(int i = 0; i < prefix.length(); i++) {
            index = prefix.charAt(i) - 'a';

            if(current.children[index] == null) {
                return false;
            }

            current = current.children[index];
        }
        return true;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
