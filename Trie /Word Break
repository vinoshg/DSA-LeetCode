// https://leetcode.com/problems/word-break/description/
// TIme O(nl + 2^l.l) and Space O(nl)
class Solution {
    class Node {
        Node[] children;
        boolean eow;

        Node() {
            children = new Node[26];
            eow = false;
        }
    }

    Node root = new Node();

    public boolean wordBreak(String s, List<String> wordDict) { // Time : O(N . L + 2^L . L) = (Trie construction + recursion comparison) and Space : O(N . L)
        for(String word : wordDict) {
            insert(word);
        }

        return helper(s);
    }

    public boolean helper(String s) {
        if(s.length() == 0) {
            return true;
        }

        for(int i = 1; i <= s.length(); i++) {
            if(search(s.substring(0, i)) && helper(s.substring(i))) {
                return true;
            }
        }
        return false;
    }

    public void insert(String word) {
        int idx = 0;
        Node node = root;

        for(int i = 0; i< word.length(); i++) {
            idx = word.charAt(i) - 'a';

            if(node.children[idx] == null) {
                node.children[idx] = new Node();
            }

            node = node.children[idx];
        }
        node.eow = true;
    }

    public boolean search(String key) {
        int idx = 0;
        Node node = root;

        for(int i = 0; i < key.length(); i++) {
            idx = key.charAt(i) - 'a';

            if(node.children[idx] == null) {
                return false;
            }
            if(i == key.length() - 1 && node.children[idx].eow == false) {
                return false;
            }

            node = node.children[idx];
        }
        return true;
    }
}


-------------------------
import java.util.*;

public class WordBreak {
    public boolean wordBreak(String s, List<String> wordDict) {
        // Convert the wordDict to a HashSet for faster lookups
        Set<String> wordSet = new HashSet<>(wordDict);
        int n = s.length();

        // DP array to store whether substring s[0...i-1] can be segmented
        boolean[] dp = new boolean[n + 1];
        dp[0] = true; // Base case: empty string can always be segmented

        // Fill the DP array
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j < i; j++) {
                // Check if substring s[j...i-1] is in the dictionary and dp[j] is true
                if (dp[j] && wordSet.contains(s.substring(j, i))) {
                    dp[i] = true;
                    break;
                }
            }
        }

        return dp[n];
    }

    public static void main(String[] args) {
        WordBreak solution = new WordBreak();

        // Example 1
        String s1 = "leetcode";
        List<String> wordDict1 = Arrays.asList("leet", "code");
        System.out.println(solution.wordBreak(s1, wordDict1)); // Output: true

        // Example 2
        String s2 = "applepenapple";
        List<String> wordDict2 = Arrays.asList("apple", "pen");
        System.out.println(solution.wordBreak(s2, wordDict2)); // Output: true

        // Example 3
        String s3 = "catsandog";
        List<String> wordDict3 = Arrays.asList("cats", "dog", "sand", "and", "cat");
        System.out.println(solution.wordBreak(s3, wordDict3)); // Output: false
    }
}
