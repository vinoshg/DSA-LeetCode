// https://leetcode.com/problems/rotting-oranges/description/
class Solution { // Time : O(n * m) and Space : O(n * m)
    public int orangesRotting(int[][] grid) {
        int rows = grid.length;
        int cols = grid[0].length;

        Queue<int[]> queue = new LinkedList<>();
        int freshOranges = 0;

        //Calculating total freshOranges and pointing rotten orange position
        for(int i = 0; i < rows; i++) {
            for(int j = 0; j < cols; j++) {
                if(grid[i][j] == 2) {
                    queue.offer(new int[] {i,j});
                } else if(grid[i][j] == 1) {
                    freshOranges ++;
                }
            }
        }

        int[][] directions = {{0,1}, {0,-1}, {1,0}, {-1,0}};
        int minutes = 0;

        //Making adjacent fresh one's 'of rotten oranges to rotten
        while(!queue.isEmpty() && freshOranges > 0) {
            int size = queue.size(); // Maintain level by level(vertical levels)
            for(int i = 0; i < size; i++) {
                int[] point = queue.poll();
                for(int[] dir : directions) { // 4 directions
                    int x = point[0] + dir[0];
                    int y = point[1] + dir[1];

                    if(x >= 0 && x < rows && y >= 0 && y < cols && grid[x][y] ==1) { // valid cell and presence of fresh orange
                        grid[x][y] = 2;
                        queue.offer(new int[] {x, y});
                        freshOranges --;
                    }
                }
            }
            minutes ++;
        }

        return freshOranges == 0 ? minutes : -1;
    }
}
