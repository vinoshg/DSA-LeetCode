-------------------------------------
Both Connected and Disconnected Graph
-------------------------------------
    public static boolean isCyclicDirected(ArrayList <Integer> [] graph, int curr, boolean vis[], boolean stack[]) {
        vis[curr] = true;
        stack[curr] = true;
        for (int i = 0; i < graph[curr].size(); i++) {
            int next = graph[curr].get(i);
            if (stack[next]) { //cycle exists
                return true;
            // } else if (!vis[next] && isCyclicDirected(graph, next, vis, stack)) {
            } else if (!vis[e.dest]) {
                if(isCyclicDirected(graph, next, vis, stack)) {
                    return true;
                }
            }
        }
        stack[curr] = false;
        return false;
    }

------------------


class Solution { //Time:O(V+E) Space:O(V)

  public boolean isCyclicDirected(List<Integer>[] graph) {

    int n = graph.length;
    boolean[] visited = new boolean[n];
    boolean[] recursionStack = new boolean[n];

    for(int i = 0; i < n; i++) { 
      if(!visited[i]) {
        if(isCyclicUtil(graph, i, visited, recursionStack)) {
          return true;
        }
      }
    }

    return false;
  }

  public boolean isCyclicUtil(List<Integer>[] graph, int node, boolean[] visited, boolean[] recursionStack) {

    if(recursionStack[node]) {
      return true;  
    }
    
    if(visited[node]) {
      return false;
    }

    visited[node] = true;
    recursionStack[node] = true;

    for(int neighbor : graph[node]) {
      if(isCyclicUtil(graph, neighbor, visited, recursionStack)) {
        return true;
      }
    }

    recursionStack[node] = false;
    return false;

  }

}

---------
OR
---------

class Solution {

    public boolean isCyclic(int V, ArrayList < ArrayList < Integer >> adj) {

        boolean[] visited = new boolean[V];
        boolean[] recStack = new boolean[V];

        for (int i = 0; i < V; i++) {
            // if(!visited[i]) {
            if (isCyclicUtil(i, visited, recStack, adj)) {
                return true;
            }
            // }

        }

        return false;
    }

    public boolean isCyclicUtil(int node, boolean[] visited,
        boolean[] recStack, ArrayList < ArrayList < Integer >> adj) {

        // if(recStack[node]) 
        //   return true;

        visited[node] = true;
        recStack[node] = true;

        for (int neighbor: adj.get(node)) {
            if (recStack[neighbor])
                return true;
            else if (!visited[neighbor]) {
                if (isCyclicUtil(neighbor, visited, recStack, adj))
                    return true;
            }
        }

        recStack[node] = false;
        return false;
    }
}
