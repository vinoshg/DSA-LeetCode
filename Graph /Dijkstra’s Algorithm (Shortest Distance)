//Time:O(E+V.logV) Space:O(V)
import java.util.*;

class Solution {
    static class Pair {
        int node;
        int distance;

        Pair(int node, int distance) {
            this.node = node;
            this.distance = distance;
        }
    }

    public int[] dijkstra(int V, List<List<Pair>> adj, int source) {
        // Array to store the shortest distance from the source
        int[] dist = new int[V];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[source] = 0;

        // Priority Queue (Min-Heap) to pick the node with the smallest distance
        PriorityQueue<Pair> pq = new PriorityQueue<>((a, b) -> a.distance - b.distance);
        pq.offer(new Pair(source, 0));

        while (!pq.isEmpty()) {
            Pair current = pq.poll();
            int u = current.node;

            // Traverse all neighbors of the current node
            for (Pair neighbor : adj.get(u)) {
                int v = neighbor.node;
                int weight = neighbor.distance;

                // Relaxation step
                if (dist[u] + weight < dist[v]) {
                    dist[v] = dist[u] + weight;
                    pq.offer(new Pair(v, dist[v]));
                }
            }
        }

        return dist;
    }

    public static void main(String[] args) {
        int V = 5; // Number of vertices
        List<List<Pair>> adj = new ArrayList<>();

        // Initialize adjacency list
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }

        // Add edges (u, v, weight)
        adj.get(0).add(new Pair(1, 2));
        adj.get(0).add(new Pair(4, 1));
        adj.get(1).add(new Pair(2, 3));
        adj.get(4).add(new Pair(2, 2));
        adj.get(4).add(new Pair(3, 6));
        adj.get(2).add(new Pair(3, 1));

        Solution solution = new Solution();
        int[] distances = solution.dijkstra(V, adj, 0); // Source is node 0

        // Print the shortest distances
        System.out.println("Shortest distances from source:");
        for (int i = 0; i < distances.length; i++) {
            System.out.println("Node " + i + " -> " + distances[i]);
        }
    }
}


------------------------------------------

class Pair { //Time:O(E+V.logV) Space:O(V)
  int first;
  int second;

  public Pair(int first, int second) {
    this.first = first;
    this.second = second; 
  }
}

class Solution {

  static int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int S) {

    int[] dist = new int[V];
    Arrays.fill(dist, Integer.MAX_VALUE);

    dist[S] = 0;

    boolean[] visited = new boolean[V];

    PriorityQueue<Pair> pq = new PriorityQueue<>(Comparator.comparingInt(p -> p.second));

    pq.offer(new Pair(S, 0));

    while(!pq.isEmpty()) {

      Pair p = pq.poll();
      int node = p.first;
      
      if(!visited[node]) {

        visited[node] = true;

        int currDist = p.second;

        for(ArrayList<Integer> edge : adj.get(node)) {

          int neighbor = edge.get(0);
          int edgeDist = edge.get(1);

          if(dist[node] + edgeDist < dist[neighbor]) {
            dist[neighbor] = dist[node] + edgeDist;
            pq.offer(new Pair(neighbor, dist[neighbor]));
          }
        }
      }
    }
    return dist;
  }

}

---------
OR
---------

class Pair {
  int first; 
  int second;

  public Pair(int first, int second) {
    this.first = first;
    this.second = second;
  }
}

class Solution {

  static int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int S) {

    int[] dist = new int[V];
    Arrays.fill(dist, Integer.MAX_VALUE);

    dist[S] = 0;

    boolean[] visited = new boolean[V];

    PriorityQueue<Pair> pq = new PriorityQueue<>(Comparator.comparingInt(p -> p.second));

    pq.offer(new Pair(S, 0));

    while(!pq.isEmpty()) {
      
      Pair p = pq.poll();
      int node = p.first;

      if(visited[node]) 
        continue;

      visited[node] = true;
      
      int currDist = p.second;

      for(ArrayList<Integer> edge : adj.get(node)) {

        int neighbor = edge.get(0);
        int edgeDist = edge.get(1);

        if(dist[node] + edgeDist < dist[neighbor]) {
          dist[neighbor] = dist[node] + edgeDist;
          pq.offer(new Pair(neighbor, dist[neighbor]));
        }
      }

    }
    return dist;
  }

}

---------
OR
---------

class Pair {
  int first; 
  int second;

  public Pair(int first, int second) {
    this.first = first;
    this.second = second;
  }
}

class Solution {

  //Function to find shortest distances of all vertices from source
  static int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int S) {
    
    int[] dist = new int[V];
    Arrays.fill(dist, Integer.MAX_VALUE);

    dist[S] = 0; 

    PriorityQueue<Pair> pq = new PriorityQueue<>(Comparator.comparingInt(p -> p.second));

    pq.offer(new Pair(S, 0));

    while(!pq.isEmpty()) {
      Pair p = pq.poll();
      int node = p.first;
      int currDist = p.second;

      if(currDist > dist[node]) {
        continue;  
      }

      for(ArrayList<Integer> edge : adj.get(node)) {
        int neighbor = edge.get(0);
        int edgeDist = edge.get(1);
        
        if(dist[node] + edgeDist < dist[neighbor]) {
          dist[neighbor] = dist[node] + edgeDist;
          pq.offer(new Pair(neighbor, dist[neighbor])); 
        }
      }
    }

    return dist;
  }

}
