class Pair { //Time:O(E+V.logV) Space:O(V)
  int first;
  int second;

  public Pair(int first, int second) {
    this.first = first;
    this.second = second; 
  }
}

class Solution {

  static int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int S) {

    int[] dist = new int[V];
    Arrays.fill(dist, Integer.MAX_VALUE);

    dist[S] = 0;

    boolean[] visited = new boolean[V];

    PriorityQueue<Pair> pq = new PriorityQueue<>(Comparator.comparingInt(p -> p.second));

    pq.offer(new Pair(S, 0));

    while(!pq.isEmpty()) {

      Pair p = pq.poll();
      int node = p.first;
      
      if(!visited[node]) {

        visited[node] = true;

        int currDist = p.second;

        for(ArrayList<Integer> edge : adj.get(node)) {

          int neighbor = edge.get(0);
          int edgeDist = edge.get(1);

          if(dist[node] + edgeDist < dist[neighbor]) {
            dist[neighbor] = dist[node] + edgeDist;
            pq.offer(new Pair(neighbor, dist[neighbor]));
          }
        }
      }
    }
    return dist;
  }

}

---------
OR
---------

class Pair {
  int first; 
  int second;

  public Pair(int first, int second) {
    this.first = first;
    this.second = second;
  }
}

class Solution {

  //Function to find shortest distances of all vertices from source
  static int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int S) {
    
    int[] dist = new int[V];
    Arrays.fill(dist, Integer.MAX_VALUE);

    dist[S] = 0; 

    PriorityQueue<Pair> pq = new PriorityQueue<>(Comparator.comparingInt(p -> p.second));

    pq.offer(new Pair(S, 0));

    while(!pq.isEmpty()) {
      Pair p = pq.poll();
      int node = p.first;
      int currDist = p.second;

      if(currDist > dist[node]) {
        continue;  
      }

      for(ArrayList<Integer> edge : adj.get(node)) {
        int neighbor = edge.get(0);
        int edgeDist = edge.get(1);
        
        if(dist[node] + edgeDist < dist[neighbor]) {
          dist[neighbor] = dist[node] + edgeDist;
          pq.offer(new Pair(neighbor, dist[neighbor])); 
        }
      }
    }

    return dist;
  }

}
