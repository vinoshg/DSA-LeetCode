class Solution { //Time:O(V+E) Space:O(V+E)

  public List<Integer> topologicalSortUsingDFS(List<Integer>[] graph) {
    int n = graph.length;
    boolean[] visited = new boolean[n];

    Stack<Integer> stack = new Stack<>();

    for(int i = 0; i < n; i++) {
      if(!visited[i]) {
        dfs(graph, i, visited, stack);  
      }
    }

    List<Integer> topSorted = new ArrayList<>();
    while(!stack.isEmpty()) {
      topSorted.add(stack.pop());
    }
    return topSorted;

  }

  public void dfs(List<Integer>[] graph, int node, boolean[] visited, Stack<Integer> stack) {
    visited[node] = true;
    
    for(int neighbor : graph[node]) {
      if(!visited[neighbor]) {
        dfs(graph, neighbor, visited, stack);
      }
    }
    
    stack.push(node);
  }

}
