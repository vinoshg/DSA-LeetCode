// https://leetcode.com/problems/number-of-islands/description/
class Solution { // Time : O(n * m) and Space : O(n * m)
    public int numIslands(char[][] grid) {
        int islands = 0;

        for(int i = 0; i < grid.length; i++) {
            for(int j = 0; j < grid[i].length; j++) {
                if(grid[i][j] == '1') {
                    islands ++;
                    dfs(grid, i, j); //To mark cell 0
                }
            }
        }
        return islands;
    }

    public void dfs(char[][] grid, int i, int j) {
        if(i < 0 || j < 0 || i >= grid.length || j >= grid[i].length || grid[i][j] == '0') {
            return;
        }

        grid[i][j] = '0'; // Make sure use '1' and '0' for comapre, its char[][]
        
        dfs(grid, i + 1, j);
        dfs(grid, i - 1, j);
        dfs(grid, i, j - 1);
        dfs(grid, i, j + 1);
    }
}
