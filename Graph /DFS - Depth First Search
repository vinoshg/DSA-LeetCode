-------------------------------------
Both Connected and Disconnected Graph
-------------------------------------
class Solution { //Time:O(V+E) Space:O(V)

  public List<Integer> dfs(List<Integer>[] graph) {

    List<Integer> result = new ArrayList<>();
    boolean[] visited = new boolean[graph.length];

    for(int i = 0; i < graph.length; i++) {
      if(!visited[i]) {
        dfs(graph, i, visited, result);  
      }
    }

    return result;
  }

  private void dfs(List<Integer>[] graph, int node, boolean[] visited, List<Integer> result) {
    
    if(visited[node]) {
      return;
    }
    
    visited[node] = true;
    result.add(node);

    for(int neighbor: graph[node]) {
      dfs(graph, neighbor, visited, result);
    }
  }

}

---------
OR
---------
class Solution {

  public List<Integer> dfs(List<Integer>[] graph) {

    List<Integer> result = new ArrayList<>();
    boolean[] visited = new boolean[graph.length];

    for(int i = 0; i < graph.length; i++) {
      if(!visited[i]) {
        dfs(graph, i, visited, result);  
      }
    }

    return result;
  }

  private void dfs(List<Integer>[] graph, int node, boolean[] visited, List<Integer> result) {
    visited[node] = true;
    result.add(node);

    for(int neighbor: graph[node]) {
      if(!visited[neighbor]) {
        dfs(graph, neighbor, visited, result);
      }
    }
  }

}
