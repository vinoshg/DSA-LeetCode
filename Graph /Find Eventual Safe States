https://leetcode.com/problems/find-eventual-safe-states/description/

class Solution { //Time:O(V+E) Space:O(V)
    public List<Integer> eventualSafeNodes(int[][] graph) {
        int n = graph.length;
        boolean[] visited = new boolean[n];
        boolean[] recursionStack = new boolean[n];

        List<Integer> safeNodes = new ArrayList<>();

        for(int i = 0; i < n; i++) {
            if(isSafe(graph, i, visited, recursionStack)) {
                safeNodes.add(i);
            }
        }
        return safeNodes;
    }

    public boolean isSafe(int[][] graph, int node, boolean[] visited, boolean[] recursionStack) {
        if(recursionStack[node]) return false;
        
        if(visited[node]) return true;

        visited[node] = true;
        recursionStack[node] = true;

        for(int neighbor : graph[node]) {
            if(!isSafe(graph, neighbor, visited, recursionStack)) {
                return false;
            }
        }

        recursionStack[node] = false;
        return true; //No cycle
    }
}
