class Solution { //Time:O(V+E) Space:O(V)

  public List<Integer> bfs(List<Integer>[] graph) {

    int n = graph.length;
    List<Integer> result = new ArrayList<>(); 
    boolean[] visited = new boolean[n];

    Queue<Integer> q = new LinkedList<>();
    q.add(0); // add starting node
    visited[0] = true;

    while(!q.isEmpty()) {
      int curr = q.poll();
      result.add(curr); // add to result

      for(int neighbor : graph[curr]) {
        if(!visited[neighbor]) {
          visited[neighbor] = true;
          q.add(neighbor); 
        }
      }
    }

    return result;

  }

----------------
Disconnected Graph
----------------

class Solution {

  public void bfs(int node, boolean[] visited, List<Integer>[] graph, List<Integer> list) {
    Queue<Integer> q = new LinkedList<>();
    q.add(node);
    visited[node] = true;

    while(!q.isEmpty()) {
      int curr = q.poll();
      list.add(curr);

      for(int neighbor : graph[curr]) {
        if(!visited[neighbor]) {
          visited[neighbor] = true;
          q.add(neighbor);
        }
      }
    }
  }

  public List<List<Integer>> disconnectedBFS(List<Integer>[] graph) {
    
    int n = graph.length;
    List<List<Integer>> result = new ArrayList<>();
    boolean[] visited = new boolean[n];

    for(int i = 0; i < n; i++) {
      if(!visited[i]) {
        List<Integer> list = new ArrayList<>();
        bfs(i, visited, graph, list);
        result.add(list);
      }
    }
    return result;
  }

}
