-------------------------------------
Both Connected and Disconnected Graph
-------------------------------------
    public static boolean isCyclicUndirected(ArrayList <Integer> [] graph, boolean vis[], int curr, int par) {
        vis[curr] = true;
        for (int neighbor : graph[curr]) {
            //case1
            if (vis[neighbor] && neighbor != par) {
                return true;
            // } else if (neighbor == par) {
            //     //case 2
            //     continue;
            } else if (!vis[neighbor]) {
                //case 3
                if (isCyclicUndirected(graph, vis, neighbor, curr)) {
                    return true;
                }
            }
        }
        return false;
    }
    //O(V+E) - Disconnected Graph
    public static boolean isCyclic(ArrayList <Integer> [] graph, boolean vis[]) {
        for (int i = 0; i < graph.length; i++) {
            if (isCyclicUndirected(graph, vis, i, -1)) {
                return true;
            }
        }
        return false;
    }



--------------------------

class Solution { //Time:O(V+E) Space:O(V)

    public boolean isCycleUndirected(List<Integer>[] graph) {
        int n = graph.length;
        boolean[] visited = new boolean[n];

        for (int i = 0; i < n; i++) {
            if (!visited[i]) {
                if (checkForCycle(graph, i, -1, visited)) {
                    return true;
                }
            }
        }

        return false;
    }

    public boolean checkForCycle(List<Integer>[] graph, int node, int parent, boolean[] visited) {

        visited[node] = true;

        for (int neighbor: graph[node]) {

            if (!visited[neighbor]) {
                if (checkForCycle(graph, neighbor, node, visited)) {
                    return true;
                }
            } else if (neighbor != parent) { // if(visited[neighbor] && neighbor != parent) - Its cycle
                return true;
            }
        }

        return false;
    }
}

---------
OR
---------

class Solution {
    // Function to detect cycle in an undirected graph 
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        
        boolean[] visited = new boolean[V];
        
        for(int i = 0; i < V; i++) {
            if(!visited[i]) {
                if(checkForCycle(i, -1, visited, adj)) {
                    return true;
                }
            }
        }
        
        return false;
    }

    boolean checkForCycle(int node, int parent, boolean[] visited, ArrayList<ArrayList<Integer>> adj) {
        
        visited[node] = true;
       
        for(int neighbor : adj.get(node)) {
            
            if(visited[neighbor] && neighbor != parent) {
                return true;
            } else if(!visited[neighbor]) {
                if(checkForCycle(neighbor, node, visited, adj)) {
                    return true;
                }
            }
            
        }
        
        return false;
    }
}
