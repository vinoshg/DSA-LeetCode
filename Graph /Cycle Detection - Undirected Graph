class Solution {

    public boolean isCycleUndirected(List<Integer>[] graph) {
        int n = graph.length;
        boolean[] visited = new boolean[n];

        for (int i = 0; i < n; i++) {
            if (!visited[i]) {
                if (checkForCycle(graph, i, -1, visited)) {
                    return true;
                }
            }
        }

        return false;
    }

    public boolean checkForCycle(List<Integer>[] graph, int node, int parent, boolean[] visited) {

        visited[node] = true;

        for (int neighbor: graph[node]) {

            if (!visited[neighbor]) {
                if (checkForCycle(graph, neighbor, node, visited)) {
                    return true;
                }
            } else if (neighbor != parent) { // if(visited[neighbor] && neighbor != parent) - Its cycle
                return true;
            }
        }

        return false;
    }
}
