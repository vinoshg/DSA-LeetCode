https://leetcode.com/problems/course-schedule/description/

class Solution { //Time:O(V+E) Space:O(V)
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        int[] indegree = new int[numCourses]; //Dependencies

        List<Integer>[] graph = new List[numCourses];
        for(int i = 0; i < numCourses; i++) {
            graph[i] = new ArrayList<>();
        }

        for(int[] pre : prerequisites) {
            int u = pre[1]; // u (src) = b
            int v = pre[0]; // v (dest)= a
            graph[u].add(v);
            indegree[v] ++;
        }

        //BFS
        Queue<Integer> queue = new LinkedList<>();
        for(int i = 0; i < numCourses; i++) {
            if(indegree[i] == 0) {
                queue.offer(i);
            }
        }

        int[] topologicalOrder = new int[numCourses];
        int index = 0;

        while(!queue.isEmpty()) {
            int node = queue.poll();
            topologicalOrder[index++] = node;

            //add neighbors
            for(int neigh : graph[node]) {
                indegree[neigh] --; //Dependecy reduce by 1
                if(indegree[neigh] == 0) {
                    queue.offer(neigh);
                }
            }
        }

        return index == numCourses ? true : false;
    }
}
