class Solution {

  static int[] bellman_ford(int V, ArrayList<ArrayList<Integer>> edges, int S) {

    int[] dist = new int[V];
    Arrays.fill(dist, Integer.MAX_VALUE); //GFC - Take Integer.MAX_VALUE=100000000

    dist[S] = 0;

    for(int i=0; i<V-1; i++) {
      for(ArrayList<Integer> edge : edges) {

        int u = edge.get(0);
        int v = edge.get(1);
        int w = edge.get(2);

        if(dist[u] != Integer.MAX_VALUE && dist[u] + w < dist[v]) {
          dist[v] = dist[u] + w;
        }
      }
    }

    // Detecting negative cycle
    for(ArrayList<Integer> edge : edges) {

      int u = edge.get(0);
      int v = edge.get(1);
      int w = edge.get(2);

      if(dist[u] != Integer.MAX_VALUE && dist[u] + w < dist[v]) {
        // System.out.println("Graph contains negative weight cycle");
        // return;
        return new int[]{-1};
      }
    }

    return dist;
  }

}
