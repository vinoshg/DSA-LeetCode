// https://leetcode.com/problems/n-queens-ii/
//Time : O(n^n) and Space : O(n^2) = O(n^2 + n)
class Solution {
    public int totalNQueens(int n) {
        boolean[][] board = new boolean[n][n];
        return queens(board, 0);
    }
    public int queens(boolean[][] board, int row) { // helper func
        if(row == board.length) {
            // display(board)
            return 1;
        }

        int count = 0;

        for(int col = 0; col < board.length; col++) {
            if(isSafe(board, row, col)) {
                board[row][col] = true; //true
                count += queens(board, row + 1);
                //Backtracking
                board[row][col] = false; //false
            }
        }
        return count;
    }
    public boolean isSafe(boolean[][] board, int row, int col) {
        //Vertical
        for(int i = 0; i < row; i++) {
            if(board[i][col]) {
                return false;
            }
        }

        //Diagonal left
        int maxLeft = Math.min(row, col);
        for(int i = 0; i <= maxLeft; i++) {
            if(board[row - i][col - i]) {
                return false;
            }
        }

        //Diagonal right
        int maxRight = Math.min(row, board.length - col - 1);
        for(int i = 0; i <= maxRight; i++) {
            if(board[row - i][col + i]) {
                return false;
            }
        }

        return true; //None of the above condition execute, then return true
    }
}
