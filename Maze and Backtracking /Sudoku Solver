// https://leetcode.com/problems/sudoku-solver/
// Time : O(9^(n^2)) and Space : O(n^2)
class Solution {
    public void solveSudoku(char[][] board) {
        solve(board);
    }
    public boolean solve(char[][] board) {
        int n = board.length;
        int row = -1;
        int col = -1;
        boolean emptyLeft = true; // No empty  = emptyLeft

        //Search for empty
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                if(board[i][j] == '.') {
                    row = i;
                    col = j;
                    emptyLeft = false;
                    break; // break inner for loop
                }
            }
            if(emptyLeft == false) {
                break; // break outer for loop
            }
        }

        if(emptyLeft == true) {
            return true; // No empty found, Sudoku solved
        }

        //Backtracking
        for(char num = '1'; num <= '9'; num++) {
            if(isSafe(board, row, col, num)) {
                board[row][col] = num;
                if(solve(board)) {
                    return true; // No empty found ans
                } else {
                    //Backtrack - wrong ans
                    board[row][col] = '.';
                }
            }
        }
        return false; // No valid solution found, keep solve
    }

    public boolean isSafe(char[][] board, int row, int col, char num) {
        //checking row
        for(int i = 0; i < board.length; i++) {
            if(board[row][i] == num) {
                return false;
            }
        }

        //checking column
        for(char[] arr : board) {
            if(arr[col] == num) {
                return false;
            }
        }

        //checking matrix
        int sqrt = (int)(Math.sqrt(board.length));
        int rowStart = row - row % sqrt;
        int colStart = col - col % sqrt;

        for(int i = rowStart; i < rowStart + sqrt; i++) {
            for(int j = colStart; j < colStart + sqrt; j++) {
                if(board[i][j] == num) {
                    return false;
                }
            }
        }
        return true;
    }
}
