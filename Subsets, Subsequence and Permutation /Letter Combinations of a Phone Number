// https://leetcode.com/problems/letter-combinations-of-a-phone-number/
class Solution {
    public List<String> letterCombinations(String digits) {
        return helper("", digits);
    }
    public List<String> helper(String p, String up) {
        if(up.isEmpty()) {
            List<String> list = new ArrayList<>();
            if(!p.isEmpty()) {
                list.add(p);
            }
            return list;
        }

        List<String> result = new ArrayList<>();

        int digit = up.charAt(0) - '0'; // char to int
        if(digit >= 2 && digit <= 6) {
            for(int i = (digit - 2) * 3; i < (digit - 1) * 3; i++) {
                char ch = (char) ('a' + i); //int to char
                result.addAll(helper(p + ch, up.substring(1)));
            }
        }
        if(digit == 7) {
            for(int i = (digit - 2) * 3; i <= (digit - 1) * 3; i++) {
                char ch = (char) ('a' + i);
                result.addAll(helper(p + ch, up.substring(1)));
            }
        }
        if(digit == 8) {
            for(int i = ((digit - 2) * 3) + 1 ; i <= (digit - 1) * 3; i++) {
                char ch = (char) ('a' + i);
                result.addAll(helper(p + ch, up.substring(1)));
            }
        }
        if(digit == 9) {
            for(int i = ((digit - 2) * 3) + 1; i <= ((digit - 1) * 3) + 1; i++) {
                char ch = (char) ('a' + i);
                result.addAll(helper(p + ch, up.substring(1)));
            }
        }
        return result;
    }
}
