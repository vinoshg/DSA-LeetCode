/* Online Java Compiler and Editor */
import java.util.*;
public class HelloWorld{

     public static void main(String []args){
        HashMap<Integer,String> map = new LinkedHashMap<>(); //LinkedHashMap maintain order in which I inserted, HashMap won't resize whenever required
        map.put(1000, "M");
        map.put(900, "CM");
        map.put(500, "D");
        map.put(400, "CD");
        map.put(100, "C");
        map.put(90, "XC");
        map.put(50, "L");
        map.put(40, "XL");
        map.put(10, "X");
        map.put(9, "IX");
        map.put(5, "V");
        map.put(4, "IV");
        map.put(1, "I");
        
        int n = 1005;
        
        // if(map.containsKey(n)) {
        //     System.out.println(map.get(n));
        // }
        StringBuilder str = new StringBuilder();
        
        for(Map.Entry<Integer,String> entry : map.entrySet()) {
            Integer key = entry.getKey();
            String value = entry.getValue();
            while(n >= key) {
                str.append(value);
                // System.out.print(value);
                n -= key;
            }
        }
        System.out.println(str.toString());
     }
}
-----------------------------------------------
import java.util.LinkedHashMap;
import java.util.Map;

public class IntegerToRoman {

    private static final Map<Integer, String> romanNumerals = new LinkedHashMap<>();

    static {
        romanNumerals.put(1000, "M");
        romanNumerals.put(900, "CM");
        romanNumerals.put(500, "D");
        romanNumerals.put(400, "CD");
        romanNumerals.put(100, "C");
        romanNumerals.put(90, "XC");
        romanNumerals.put(50, "L");
        romanNumerals.put(40, "XL");
        romanNumerals.put(10, "X");
        romanNumerals.put(9, "IX");
        romanNumerals.put(5, "V");
        romanNumerals.put(4, "IV");
        romanNumerals.put(1, "I");
    }

    public static String intToRoman(int num) {
        StringBuilder result = new StringBuilder();
        for (Map.Entry<Integer, String> entry : romanNumerals.entrySet()) {
            int value = entry.getKey();
            String numeral = entry.getValue();
            while (num >= value) {
                result.append(numeral);
                num -= value;
            }
        }
        return result.toString();
    }

    public static void main(String[] args) {
        int number = 1005;
        String romanNumber = intToRoman(number);
        System.out.println("Integer: " + number + " is Roman: " + romanNumber);
    }
}
