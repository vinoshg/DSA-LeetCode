// https://leetcode.com/problems/symmetric-tree/
class Solution {
    public boolean isSymmetric(TreeNode root) {
        //BFS - Level Order - Loop
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root.left);
        queue.offer(root.right);
        // BFS - I can Use For loop everywhere in BFS = While and for loop
        // For loop will be using when I wanted to separate each level
        // After For loop, each level I want to perform specific action. I will use 
        // *Convinience Use For loop everywhre in BFS
        while(!queue.isEmpty()) {
            TreeNode left = queue.poll();
            TreeNode right = queue.poll();

            if(left == null && right == null) {
                continue; // I will try to add null.right and null.left
            }

            if(left == null || right == null) {
                return false;
            }

            if(left.val != right.val) {
                return false;
            }

            queue.offer(left.left);
            queue.offer(right.right);
            queue.offer(left.right);
            queue.offer(right.left);
        }
        return true;
    }
}
