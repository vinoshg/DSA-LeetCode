// https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        if(root == null) {
            return result;
        }

        Deque<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        boolean reverse = false;

        while(!queue.isEmpty()) {
            int levelSize = queue.size();
            List<Integer> currentLevel = new ArrayList<>(levelSize);

            if(!reverse) {
                for(int i = 0; i < levelSize; i++) {
                 TreeNode currentNode = queue.pollFirst();
                 currentLevel.add(currentNode.val);

                 if(currentNode.left != null) {
                    queue.offerLast(currentNode.left);
                  }
                 if(currentNode.right != null) {
                    queue.offerLast(currentNode.right);
                  }
                }
            } else {
                for(int i = 0; i < levelSize; i++) {
                 TreeNode currentNode = queue.pollLast();
                 currentLevel.add(currentNode.val);

                  if(currentNode.right != null) {
                    queue.offerFirst(currentNode.right);
                   }
                  if(currentNode.left != null) {
                    queue.offerFirst(currentNode.left);
                   }
                }
             }
            reverse = !reverse;
            result.add(currentLevel);
        }
        return result;
    }
}
