// https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        if(preorder.length == 0) {
            return null;
        } // Need to Optimise using HashMap instead of Arrays.copyOfRange()
// Similarly I can do using Post Order (r = po(po.length)) and In Order
        int r = preorder[0];
        int index = 0;

        for(int i = 0; i < inorder.length; i++) {
            if(r == inorder[i]) {
                index = i;
            }
        }

        TreeNode node = new TreeNode(r);

        node.left = buildTree(Arrays.copyOfRange(preorder, 1, index + 1), Arrays.copyOfRange(inorder, 0, index));
        node.right = buildTree(Arrays.copyOfRange(preorder, index + 1, preorder.length), Arrays.copyOfRange(inorder, index + 1, inorder.length));

        return node;
    }
}
