// https://practice.geeksforgeeks.org/problems/predecessor-and-successor/1
public TreeNode findPredecessor(TreeNode root, int key){
    if(root == null) {
      return null;
    }

    Queue<TreeNode> queue = new LinkedList<>();
    queue.offer(root);
    prev = null;

    while(!queue.isEmpty()) {
      int levelSize = queue.size;
      for(int i = 0; i < levelSize; i++) {
        TreeNode currentNode = queue.poll();

        if(currentNode.left != null) {
          queue.offer(currentNode.left);
        }
        if(currentNode.right != null) {
          queue.offer(currentNode.right);
        }
        if(currentNode.val == key) {
          break;
        } else {
          prev = currentNode;
        }
      }
    }
    return prev;
  }
