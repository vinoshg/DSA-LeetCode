// https://leetcode.com/problems/populating-next-right-pointers-in-each-node/
class Solution {
    public Node connect(Node root) {
        if(root == null) {
            return root;
        }

        Node leftMost = root; // Ignore null pointer!
        while(leftMost.left != null) {
            Node current = leftMost;
            while(current != null) {
                current.left.next = current.right;
                if(current.next != null) {
                    current.right.next = current.next.left;
                }
                current = current.next; 
            }
            leftMost = leftMost.left;    
        }
        return root;
    }
}

---------------
O(n) & O(n)
---------------
class Solution {
    public Node connect(Node root) {
        if(root == null) {
            return root;
        }

        Queue<Node> queue = new LinkedList<>();
        queue.offer(root);

        while(!queue.isEmpty()) {
            int levelSize = queue.size();

            for(int i=0; i < levelSize; i++) {
                Node node = queue.poll();

                if(i < levelSize - 1) { //Another element in the same level
                    node.next = queue.peek();
                }

                if(node.left != null) queue.offer(node.left);
                if(node.right != null) queue.offer(node.right);
            }
        }

        return root;
    }
}
